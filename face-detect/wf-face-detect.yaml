apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: face-detect
spec:
  entrypoint: main
  arguments:
    parameters:
    - name: key # s3 key in the face-detect bucket
      value: to-be-identified/obama_and_biden.jpg

  serviceAccountName: face-detect

  # Optional. Indicates the artifact repository (s3 bucket) to use for intermediate artifacts for
  # the workflow (defined in the artifact-repositories ConfigMap). Uses the annotated default if omitted
  # artifactRepositoryRef:
  #   key: face-detect

  # artifactGC:
  #   strategy: OnWorkflowDeletion
  #   serviceAccountName: face-detect

  templates:
    - name: main
      dag:
        tasks:
        - name: crop-faces
          template: crop-faces

        - name: iterate-faces
          dependencies: [crop-faces]
          template: iterate-faces

        - name: identify-face
          dependencies: [iterate-faces]
          withParam: "{{tasks.iterate-faces.outputs.result}}"
          template: identify-face
          arguments:
            artifacts:
            - name: face
              s3:
                key: "{{item}}"

        - name: approval
          dependencies: [identify-face]
          template: approval

        - name: fail
          dependencies: [approval]
          when: "{{tasks.approval.outputs.parameters.approved}} != YES"
          inline:
            container:
              image: busybox:1.36
              command: [sh, -c]
              args: ["exit 1"]

        - name: finalize
          dependencies: [approval]
          when: "{{tasks.approval.outputs.parameters.approved}} == YES"
          inline:
            container:
              image: busybox:1.36
              command: [sh, -c]
              args: ["echo success!"]

    # Downloads the image supplied to the workflow (workflow.parameters.key)
    # generates multiple cropped images of faces from the supplied image.
    - name: crop-faces
      inputs:
        artifacts:
        - name: images
          path: /tmp/input/{{workflow.parameters.key}}
          s3:
            key: "{{workflow.parameters.key}}"
      script:
        image: hdgigante/python-opencv:4.7.0-ubuntu
        command: [/usr/bin/python3]
        source: |
          import cv2
          import os

          input_image = "/tmp/input/{{workflow.parameters.key}}"
          output_dir = "/tmp/cropped-faces/"
          os.mkdir(output_dir)

          # read the input image
          img = cv2.imread(input_image)

          # convert to grayscale of each frames
          gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

          # read the haarcascade to detect the faces in an image
          face_cascade = cv2.CascadeClassifier('/usr/local/share/opencv4/haarcascades/haarcascade_frontalface_default.xml')

          # detects faces in the input image
          faces = face_cascade.detectMultiScale(gray, 1.3, 4)
          print('Number of detected faces:', len(faces))

          # loop over all detected faces
          if len(faces) > 0:
            for i, (x, y, w, h) in enumerate(faces):
                # To draw a rectangle in a face
                cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 255), 2)
                face = img[y:y + h, x:x + w]
                #cv2.imshow("Cropped Face", face)
                cv2.imwrite(output_dir + f'face{i}.jpg', face)
                print(f"face{i}.jpg is saved")
      outputs:
        artifacts:
        - name: cropped-faces
          path: /tmp/cropped-faces
          archive:
            none: {}

    # Iterates the cropped faces that were generated by the `crop-faces` step, then 
    # produces a list of S3 key locations so that they can be identified in parallel
    - name: iterate-faces
      data:
        source:
          artifactPaths:
            name: workflow-artifacts
            s3:
              bucket: face-detect
              key: "wf-artifacts/{{workflow.name}}/"
        transformation:
          - expression: "filter(data, {# endsWith \".jpg\"})"
      outputs:
        # Workaround necessary for artifactPaths to work
        artifacts:
          - name: file
            path: /file

    # Accepts a face artifact + and an s3 bucket of known faces, then outputs the identity (name)
    # of the individual identified from the face
    - name: identify-face
      inputs:
        artifacts:
        - name: face
          path: /tmp/face
        - name: known-faces
          path: /data/known-faces
          s3:
            key: known-faces
      container:
        image: iankoulski/face-recognition
        command: [sh, -c]
        args:
        - face_recognition /data/known-faces /tmp/face | cut -d, -f2 | tee /tmp/name
      outputs:
        parameters:
        - name: name
          valueFrom:
            path: /tmp/name

    # Suspend template that
    - name: approval
      suspend: {}
      inputs:
        parameters:
        - name: approved
          default: 'NO'
          enum:
          - 'YES'
          - 'NO'
          description: Choose YES to continue workflow
      outputs:
        parameters:
        - name: approved
          valueFrom:
            supplied: {}
